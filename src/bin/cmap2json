#!/usr/bin/env python

import sys
import numpy as np
import json

def rgba2hex(rgba):
    color = '#'
    for c in rgba: color += "%02x" % int(c)
    return color


def loadcolormap(filename):
    bounds = []
    ticks = []
    rgbarray = []
    specials = []
    mode = "COLORS"
    
    fp = open(filename, "r")

    try:
        lines = fp.readlines()
        for n, s in enumerate(lines):
            s = s.strip()
            if len(s) == 0: continue
            if s in ("BOUNDS", "TICKS", "COLORS", "UNDER_OVER_BAD_COLORS"):
                mode = s
                continue

            a = s.split()
            if len(a) not in (3, 4):
                raise ValueError("Invalid number of fields")

            if mode == "BOUNDS":
                bounds.append({
                    'start': float(a[0]),
                    'end': float(a[1]),
                    'steps': int((float(a[1]) - float(a[0]))/float(a[2])),
                })
            elif mode == "TICKS":
                ticks.append({
                    'start': float(a[0]),
                    'end': float(a[1]),
                    'steps': int((float(a[1]) - float(a[0]))/float(a[2])),
                })
            elif mode == "COLORS":
                rgbarray.append(rgba2hex(a))
            elif mode == "UNDER_OVER_BAD_COLORS":
                specials.append(rgba2hex(a))
    except IOError, err:
        print >> sys.stderr, err
    except ValueError, err:
        print >> sys.stderr, "Error reading `%s' on line %d: %s" % (filename, n+1, err)
   
    return {
        'bounds': bounds,
        'ticks': ticks,
        'colors': rgbarray,
        'missing': specials[2],
        'under': specials[0],
        'over': specials[1],
    }


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print >> sys.stderr, "Usage: %s FILE" % sys.argv[0]
        sys.exit(1)
    
    filename = sys.argv[1]
    
    print json.dumps(loadcolormap(filename), indent=4)
    
    